<?xml version="1.0"?>
<project name="NUnit" default="help" basedir=".">

<description>
**************************************************************************
* This script is used to build the NUnit Framework for any supported     *
* runtime that is installed on the system. If you are unsure about which *
* runtimes are avaiable use the list-runtimes or dump-settings target.   *
* At least one of the supported runtimes and sdk must be installed.      *
*                                                                        *
* Dependencies:                                                          *                                         
*                                                                        *
*   The script requires the NAnt 0.86 beta 1 release or a later version. *
*                                                                        *
*   To build the windows installer, you must be running on Windows.      *
*   WiX 3.0 and the WiX tasks for NAnt are required. For a standard WiX  *
*   install, the script should be able to find WiX automatically. If     *
*   this doesn't work, you should set the environment variable WIX       *
*   or the property 'wix.dir' to the path where WiX is installed.        *
*                                                                        *
*   Running the tests in the NUnit Gui requires NUnit 2.5.2. Set the     *
*   property 'nunit.dir' or the NUNIT_DIR environment variable to the    *
*   path where NUnit 2.5.2 is installed.                                 *
*                                                                        *
*   Either NCover or PartCover is required to run the 'test-coverage'    *
*   target. Set one of the properties 'ncover.dir' or 'partcover.dir'    *
*   to the directory path where the program is installed or set the      *
*   NCOVER_DIR or PARTCOVER_DIR environment variables to the same path.  *
*                                                                        *
* NOTE: You may set any of the properties mentioned above either at the  *
* command line using the NANT -D option or by creating a file called     *
* 'local.settings.include' and using property elements. Environment      *
* variable settings take precedence over any property values.            *
**************************************************************************
</description>

<!-- ***************************************************************** -->
<!-- ********* Common properties that control the build ************** -->
<!-- ***************************************************************** -->
 
  <!-- Project name - used as a prefix for packages -->
  <property name="project.name" value="NUnit"/>

  <!-- NUnit Package Version - Three digits -->
  <property name="package.version" value="2.9.5"/>

  <!-- Nominal version used for install directory and program
       files menu. Normally the same as the package version, 
       but may differ when we are in alpha or beta. -->
  <property name="nominal.version" value="2.9.5" />

  <!-- Package Configuration (Release, Alpha, Beta, etc.) -->
  <property name="package.configuration" value=""/>
  
  <!-- Base name for packages - add suffix for Alpha, Beta, RC -->
  <property name="package.name" 
      value="${project.name}-${package.version}"/>

  <!-- Frameworks supported by this build script. The first
         installed framework found is the default for builds. 
         The first .NET and Mono frameworks found are the
         respective net and mono defaults. -->
  <property name="supported.frameworks" 
    value="net-3.5,net-2.0,net-1.1,net-4.0,net-1.0,mono-3.5,mono-2.0,mono-1.0,netcf-3.5,netcf-2.0,netcf-1.0"/>

  <!-- Packages we normally create -->
  <!--<property name="standard.packages" value="std,mono" />-->
  <property name="standard.packages" value="std" />

  <!-- Our standard package for general distribution -->
  <property name="default.package.config" value="std" />

  <!-- Additional internal properties are set in the include file -->
  <include buildfile="nunit.common.include"/>

<!-- ***************************************************************** -->
<!-- ***          Targets that set the build configuration         *** -->
<!-- ***     These must come before actions like build or test     *** -->
<!-- ***************************************************************** -->

  <target name="debug" depends="set-debug-build-config"
    description="Set config to debug for commands that follow"/>

  <target name="release" depends="set-release-build-config"
    description="Set config to release for commands that follow"/>

<!-- ***************************************************************** -->
<!-- ***         Targets that set the runtime configuration        *** -->
<!-- ***     These must come before actions like build or test     *** -->
<!-- ***************************************************************** -->

  <target name="net" depends="set-default-dot-net-runtime-config"
    description="Set runtime to default .NET version"/>

  <target name="net-1.0" depends="set-net-1.0-runtime-config"
    description="Set runtime to .NET 1.0 for commands that follow"/>

  <target name="net-1.1" depends="set-net-1.1-runtime-config"
    description="Set runtime to .NET 1.1 for commands that follow"/>
      
  <target name="net-2.0" depends="set-net-2.0-runtime-config"
    description="Set runtime to .NET 2.0 for commands that follow"/>
      
  <target name="net-3.5" depends="set-net-3.5-runtime-config"
    description="Set runtime to .NET 3.5 for commands that follow"/>

  <target name="net-4.0" depends="set-net-4.0-runtime-config"
    description="Set runtime to .NET 4.0 for commands that follow"/>

  <target name="netcf-1.0" depends="set-netcf-1.0-runtime-config"
    description="Set runtime to CF 1.0 for commands that follow"/>
      
  <target name="netcf-2.0" depends="set-netcf-2.0-runtime-config"
    description="Set runtime to CF 2.0 for commands that follow"/>
      
  <target name="netcf-3.5" depends="set-netcf-3.5-runtime-config"
    description="Set runtime to CF 3.5 for commands that follow"/>
      
  <target name="mono" depends="set-default-mono-runtime-config"
    description="Set runtime to default Mono version"/>

  <target name="mono-1.0" depends="set-mono-1.0-runtime-config"
    description="Set runtime to Mono 1.0 for commands that follow"/>
  
  <target name="mono-2.0" depends="set-mono-2.0-runtime-config"
    description="Set runtime to Mono 2.0 for commands that follow"/>

  <target name="mono-3.5" depends="set-mono-3.5-runtime-config"
    description="Set runtime to Mono 3.5 for commands that follow"/>

<!-- ***************************************************************** -->
<!-- ***             Targets that clean directories                *** -->
<!-- ***************************************************************** -->

  <target name="clean" depends="set-build-dir"
      description="Removes output created by the current build config">

    <delete dir="${current.build.dir}" 
      if="${directory::exists( current.build.dir )}"/>

    <delete file="src/GeneratedAssemblyInfo.cs"
      if="${file::exists( 'src/GeneratedAssemblyInfo.cs' )}"/>

  </target>

  <target name="clean-all" 
      description="Removes output created by all build configs">
 
    <delete dir="${project.build.dir}" 
      if="${directory::exists( project.build.dir )}"/>

    <delete file="src/GeneratedAssemblyInfo.cs"
      if="${file::exists( 'src/GeneratedAssemblyInfo.cs' )}"/>

  </target>

  <target name="clean-package-dir">

        <delete dir="${package.working.dir}" 
            if="${directory::exists( package.working.dir )}"/>

  </target>

<!-- ***************************************************************** -->
<!-- ***              Targets that generate code                   *** -->
<!-- ***************************************************************** -->

  <!-- Generate code for the fluent constraint builder interface -->
  <target name="gen-syntax" 
    description="Generate code for the fluent constraint builder interface">

    <exec program="GenSyntax.exe"
      useruntimeengine="true"
      basedir="${project.tools.dir}/bin"
      workingdir="${project.src.dir}/framework">

      <arg value="-syntax:SyntaxElements.txt"/>
      <arg value="Is.cs"/>
      <arg value="Has.cs"/>
      <arg value="Contains.cs"/>
      <arg value="Throws.cs"/>
      <arg value="Constraints/ConstraintFactory.cs"/>
      <arg value="Constraints/ConstraintExpression.cs"/>
      <arg value="Assert.cs"/>

    </exec>

    <!-- Ensure we only do this once per session -->
    <property name="generated.syntax" value="YES"/>

  </target>

<!-- ***************************************************************** -->
<!-- ***              Targets that perform builds                  *** -->
<!-- ***************************************************************** -->

  <target name="build-all"
    description="Build everything, for all supported runtimes">


    <foreach item="String" delim="," 
        property="framework" in="${installed.frameworks}">

      <call target="set-${framework}-runtime-config"/>
      <call target="build"/>

    </foreach>

  </target>

  <target name="build"
    description="Build everything, for current runtime and config">

    <call target="build-nunit" unless="${runtime.platform=='netcf'}"/>
    <call target="build-nunitlite"/>

  </target>

  <target name="build-nunit" depends="make-build-dir">

    <fail if="${runtime.platform=='netcf'}"
      message="The full NUnit framework may not be built for netcf"/>

    <call target="build-tools"
      unless="${property::exists('built.tools')}"/>
    <call target="gen-syntax" 
      unless="${property::exists('generated.syntax')}"/>

    <nant target="build" buildfile="src/framework/nunit.framework.build"/>
    <nant target="build" buildfile="src/test-assembly/test-assembly.build"/>
    <nant target="build" buildfile="src/tests/nunit.framework.tests.build"/>
    <nant target="build" buildfile="src/runner/test-runner.build"/>

  </target>

  <target name="build-nunitlite" depends="make-build-dir">

    <call target="build-tools"
      unless="${property::exists('built.tools')}"/>
    <call target="gen-syntax" 
      unless="${property::exists('generated.syntax')}"/>

    <nant target="build" buildfile="src/framework/nunitlite.build"/>
    <nant target="build" buildfile="src/tests/nunitlite.tests.build"/>

  </target>

<!-- ***************************************************************** -->
<!-- ***                 Targets for running tests                 *** -->
<!-- ***************************************************************** -->

  <target name="test" depends="build,run-test"
    description="Build and run tests for selected config and runtime"/>

  <target name="run-test">

    <call target="nunit-test" unless="${runtime.platform=='netcf'}"/>
    <call target="nunitlite-test"/>

  </target>

  <target name="init-test" depends="set-build-dir">

    <property name="result.file" 
      value="TestResult-${nant.settings.currentframework}"/>

    <property name="nunit.options" value="" 
      unless="${property::exists('nunit.options')}"/>

    <!--<property name="nunit.commandline"
      value="nunit.framework.tests.dll ${nunit.options} -xml:${result.file}.xml"/>-->

    <property name="nunit.commandline"
      value="nunit.framework.tests.dll ${nunit.options}"/>

  </target>

  <target name="nunit-test" depends="init-test">

    <echo message="*"/>
    <echo message="* Testing the nunit.framework ${runtime.config} ${build.config} build"/>
    <echo message="*"/>

    <!-- We use exec rather than the nunit2 task because we are testing
         a new build of NUnit which is likely not to be included in the Nant build -->

    <!--<exec basedir="${nunit.console.dir}"
          workingdir="${current.build.dir}" 
	  program="nunit-console.exe" 
          useruntimeengine="true"
	  commandline="${nunit.commandline}" />-->

    <exec basedir="${current.build.dir}"
          workingdir="${current.build.dir}"
          program="test-runner.exe"
          useruntimeengine="true"
          commandline="${nunit.commandline}" />

  </target>

  <target name="nunitlite-test" depends="init-test">

    <echo message="*"/>
    <echo message="* Testing the NUnitLite ${runtime.config} ${build.config} build"/>
    <echo message="*"/>

    <exec basedir="${current.build.dir}"
	  program="nunitlite.tests.exe" 
          useruntimeengine="true" />

  </target>

  <target name="test-coverage" depends="build"
    description="Run tests under PartCover to get coverage results">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} test coverage run"/>
    <echo message="*"/>

    <fail unless="${property::exists('ncover.dir') or property::exists('partcover.dir')}">
Unable to locate either NCover or PartCover, one of which is needed for
test coverage. Edit your 'local.settings.include' file to set property
'ncover.dir' or 'partcover.dir' to the directory where the program is 
installed. Alternatively, you may set the NCOVER_DIR or PARTCOVER_DIR 
environment variable.
    </fail>

    <call target="run-ncover" 
      if="${property::exists('ncover.dir')}"/>

    <call target="run-partcover" 
      if="${property::exists('partcover.dir')}"
      unless="${property::exists('ncover.dir')}"/>

  </target>

  <target name="run-ncover" depends="init-test">

    <fail unless="${property::exists('ncover.dir')}">
Unable to locate your NCover installation. Set property 'ncover.dir'
to the directory where it is installed in your 'local.settings.include'
file or set the NCOVER_DIR environment variable.
    </fail>

    <property name="ncover.commandline"
      value="test-runner.exe ${nunit.commandline} //a nunit.framework //x TestCoverage-${nant.settings.currentframework}.xml"/>

    <exec basedir="${ncover.dir}"
          workingdir="${current.build.dir}" 
	  program="NCover.Console.exe" 
          useruntimeengine="true"
	  commandline="${ncover.commandline}" />

  </target>

  <target name="run-partcover" depends="init-test">

    <fail unless="${property::exists('partcover.dir')}">
Unable to locate your PartCover installation. Set property 'partcover.dir'
to the directory where it is installed in your 'local.settings.include'
file or set the PARTCOVER_DIR environment variable.
    </fail>

    <property name="partcover.commandline"
      value='--target test-runner.exe --target-args "${nunit.commandline}" --include [nunit.framework]* --output TestCoverage-${nant.settings.currentframework}.xml'/>

    <exec basedir="${partcover.dir}"
          workingdir="${current.build.dir}" 
	  program="PartCover.exe" 
          useruntimeengine="true"
	  commandline="${partcover.commandline}" />

  </target>

  <target name="test-all"
      description="Build and test all runtimes for current config">

    <foreach item="String" delim="," 
        property="framework" in="${installed.frameworks}">

      <call target="set-${framework}-runtime-config"/>
      <call target="test" />

    </foreach>

  </target>

  <target name="gui-test" depends="build,run-gui-test"
    description="Run tests for a build using gui runner"/>

  <target name="run-gui-test">

    <fail unless="${property::exists('nunit.dir')}">
Unable to locate your NUnit installation. Because NUnit 3.0 has
not yet reached a stage where it can run its own tests, you must
set property 'nunit.dir' to a directory where NUnit 2.5 or higher
is installed in your 'local.settings.include' file or set the 
NUNIT_DIR environment variable.
    </fail>

    <call target="nunit-gui-test" unless="${runtime.platform=='netcf'}"/>
    <call target="nunitlite-gui-test"/>

  </target>

  <target name="nunit-gui-test" depends="init-test">

    <echo message="*"/>
    <echo message="* Testing the nunit.framework ${runtime.config} ${build.config} build"/>
    <echo message="*"/>

    <exec basedir="${nunit.dir}/bin/net-2.0" 
      workingdir="${current.build.dir}" 
      program="nunit.exe" 
      commandline="nunit.framework.tests.dll -run"/>

  </target>

  <target name="nunitlite-gui-test" depends="init-test">

    <echo message="*"/>
    <echo message="* Testing the NUnitite ${runtime.config} ${build.config} build"/>
    <echo message="*"/>

    <exec basedir="${nunit.dir}/bin/net-2.0" 
      workingdir="${current.build.dir}" 
      program="nunit.exe" 
      commandline="nunitlite.tests.exe -run"/>

  </target>

<!-- ***************************************************************** -->
<!-- *       Build the NUnit samples - not part of normal build    *** -->
<!-- ***************************************************************** -->

  <!--
  <property name="samples.bin.dir"
    value="${path::combine(project.samples.dir, 'bin')}"/>

  <target name="clean-samples" description="Removes the samples build directory">
    <delete dir="${samples.bin.dir}" />
  </target>

  <target name="build-samples" depends="build"
     description="Build the NUnit samples">
    
    <mkdir dir="${samples.bin.dir}" unless="${directory::exists(samples.bin.dir)}" />

    <copy todir="${samples.bin.dir}"
      file="${path::combine(current.build.dir,'nunit.framework.dll')}" />
    <copy todir="${samples.bin.dir}"
      file="${path::combine(current.build.dir,'nunit.core.dll')}" />

    <nant target="build">
      <buildfiles refid="sample.buildfiles" />
    </nant>

  </target>
  -->

<!-- ***************************************************************** -->
<!-- ***         Targets for packaging the NUnit distribution      *** -->
<!-- ***************************************************************** -->

  <target name="package-all"
      description="Create all the standard packages for distribution">
      
    <call target="package-src"/>

    <call target="package-docs"/>

    <foreach item="String" delim="," 
        property="package.config" in="${standard.packages}">

      <call target="set-package-config"/>
      <call target="package"/>

    </foreach>

  </target>

<!-- ***************************************************************** -->
<!-- ***   Package Using the Currently Selected Package Config     *** -->
<!-- ***      or the default package if none is selected           *** -->
<!-- ***************************************************************** -->

  <target name="package" depends="build-install-image"
      description="Create a package using the current or default config">

    <call target="create-zip"/>
    <call target="create-msi" if="${create.msi}"/>

  </target>

<!-- ***************************************************************** -->
<!-- ***                    Package as a zip                       *** -->
<!-- ***************************************************************** -->

  <target name="package-zip" depends="build-install-image,create-zip"
    description="Create zip binary distribution package"/>

<!-- ***************************************************************** -->
<!-- ***                   Package as an msi                       *** -->
<!-- ***************************************************************** -->

  <target name="package-msi" depends="build-install-image,create-msi" 
    description="Build standard msi file and deploy it to the package dir"/>

<!-- ***************************************************************** -->
<!-- ***          Create zip from existing install image           *** -->
<!-- ***************************************************************** -->

  <target name="create-zip">

    <property name="zip.file.name" 
      value="${package.name}-${package.config}${build.suffix}"
      unless="${package.config==default.package.config}"/>
    <property name="zip.file.name" 
      value="${package.name}${build.suffix}"
      if="${package.config==default.package.config}"/>

    <zip ziplevel="9"
        zipfile="${project.package.dir}/${zip.file.name}.zip">
      <fileset basedir="${package.working.dir}" prefix="${package.name}">
        <include name="**"/>
      </fileset>
    </zip>

  </target>

<!-- ***************************************************************** -->
<!-- ***          Create msi from existing install image           *** -->
<!-- ***************************************************************** -->

  <target name="create-msi">
  
    <fail message="MSI can only be built on the Win32 platform" 
      unless="${platform::is-win32()}"/>

    <!--<fail message="MSI can only be built for a Microsoft runtime" 
      unless="${runtime.platform=='net'}"/>-->

    <fail unless="${property::exists('wix.dir')}">
Unable to locate your WiX installation. Installing WiX normally sets
the WIX environment variable to the directory where WiX is installed. 
If WiX is present, but the WIX variable is not set, you should set it
to the correct location.
    </fail>

    <property name="work.dir"
      value="${package.working.dir}"/>

    <property name="build.suffix" value=""
      unless="${property::exists('build.suffix')}" />
    <property name="msi.file.name"
      value="${package.name}-${package.config}${build.suffix}.msi"
      unless="${package.config==default.package.config}"/>
    <property name="msi.file.name"
      value="${package.name}${build.suffix}.msi"
      if="${package.config==default.package.config}"/>

    <candle out="${work.dir}/" exedir="${wix.dir}">
      <defines>
        <define name="ProductVersion" value="${package.version}" />
        <define name="NominalVersion" value="${nominal.version}" />
        <define name="InstallImage" value="package\NUnit-${package.version}" />
      </defines>
      <sources basedir="${project.install.dir}">
        <include name="**/*.wxs" />
      </sources>
    </candle>

    <light exedir="${wix.dir}"
      out="${project.package.dir}/${msi.file.name}" 
      extensions="WixUIExtension;WixNetFxExtension">
      <arg line="-b ${project.install.dir}\NUnit.Framework.Installer"/>
      <sources>
        <include name="${work.dir}/*.wixobj" />
        <include name="${wix.dir}/wixui.wixlib" />
      </sources>
    </light>

  </target>

<!-- ***************************************************************** -->
<!-- ***                  Package source files                     *** -->
<!-- ***************************************************************** -->

  <target name="package-src" depends="clean-package-dir"
    description="Create full source package for developer use">

    <call target="copy-docs"/>
    <!--<call target="copy-samples"/>-->
    <call target="copy-src"/>
    <call target="copy-tools" />

    <copy file="LICENSE.txt" todir="${package.working.dir}" />

    <zip  ziplevel="9"
        zipfile="${project.package.dir}/${package.name}-src.zip">
      <fileset basedir="${package.working.dir}" prefix="${package.name}">
        <include name="**"/>
      </fileset>
    </zip>
  </target>

<!-- ***************************************************************** -->
<!-- ***                      Package docs                         *** -->
<!-- ***************************************************************** -->

  <target name="package-docs" depends="clean-package-dir"
      description="Create a zip of the docs only">

    <call target="copy-docs"/>

    <zip ziplevel="9"
        zipfile="${project.package.dir}/${package.name}-docs.zip">
      <fileset basedir="${package.working.dir}" prefix="${package.name}">
        <include name="**"/>
      </fileset>
    </zip>
    
  </target>
  
<!-- ***************************************************************** -->
<!-- ***            Helper targets used for packaging              *** -->
<!-- ***************************************************************** -->

<!-- ***************************************************************** -->
<!-- ***            Build install image for a package              *** -->
<!-- ***************************************************************** -->

  <target name="build-install-image" depends="clean-package-dir">

    <call target="copy-top-level-files" />

    <foreach item="String" delim="+"
      property="runtime" in="${package.runtimes}">

      <if test="${framework::exists( runtime )}">
        <if test="${framework::sdk-exists( runtime )}">
          <call target="set-${runtime}-runtime-config"/>
          <call target="copy-bins" />
        </if>
      </if>
    </foreach>

    <call target="copy-docs" />
    <!--<call target="copy-samples" />-->

  </target>

  <target name="copy-top-level-files">

    <copy todir="${package.working.dir}">
      <fileset>
        <include name="LICENSE.txt"/>
        <include name="NOTICES.txt"/>
      </fileset>
    </copy>

  </target>

<!-- ***************************************************************** -->
<!-- ***           Copy a set of binaries for a package            *** -->
<!-- ***************************************************************** -->

  <target name="copy-bins" depends="build">

    <mkdir dir="${package.bin.dir}"/>
    <copy todir="${package.bin.dir}/${runtime.config}">
      <fileset basedir="${current.build.dir}">
        <include name="*.dll"/>
        <include name="*.exe"/>
        <include name="*.pdb"/>
        <include name="nunit.framework.xml"/>
        <include name="nunitlite.xml"/>
      </fileset>
    </copy>

  </target>
  
<!-- ***************************************************************** -->
<!-- ***           Copy the documentation for a package            *** -->
<!-- ***************************************************************** -->

  <target name="copy-docs">
    <mkdir dir="${package.doc.dir}"/>
    <copy todir="${package.doc.dir}">
      <fileset basedir="${project.doc.dir}">
        <include name="*.html"/>
	<include name="nunit.css"/>
        <include name="codeFuncs.js"/>
        <include name="favicon.ico"/>
	<include name="files/*"/>
	<include name="img/*"/>
        <exclude name="img/thumbs.db"/>
      </fileset>
    </copy>
  </target>

<!-- ***************************************************************** -->
<!-- ***            Copy sample programs for a package             *** -->
<!-- ***************************************************************** -->

<!--
  <target name="copy-samples">

    <mkdir dir="${package.samples.dir}"/>

    <copy todir="${package.samples.dir}">
      <fileset basedir="${project.samples.dir}">
        <include name="ReadMe.txt" />
        <include name="samples.common" />
        <include name="csharp/CSharp.sln" />
        <include name="jsharp/jsharp.sln" />
        <include name="vb/vb-samples.sln" />
        <include name="cpp/managed/managed-cpp.sln" />
        <include name="cpp/cpp-cli/cpp-cli.sln" />
        <include name="Extensibility/Core/CoreExtensibility.sln" />
        <include name="Extensibility/Core/Install.bat" />
      </fileset>
    </copy>

    <nant target="package">
      <buildfiles refid="sample.buildfiles"  failonerror="true" />
    </nant>

  </target>
-->

<!-- ***************************************************************** -->
<!-- ***            Copy the source code for a package             *** -->
<!-- ***************************************************************** -->

  <target name="copy-src">
    <delete dir="${package.src.dir}" />
    <mkdir dir="${package.src.dir}"/>

    <copy todir="${package.working.dir}">
      <fileset basedir="${project.base.dir}">
        <include name="LICENSE.txt"/>
        <include name="NOTICES.txt"/>
        <include name="nunit.build"/>
        <include name="nunit.common.include"/>
        <include name="nunit.snk"/>
        <include name="src/CommonAssemblyInfo.cs"/>
        <include name="install/NUnit.Installer.sln"/>
        <include name="install/NUnit.Framework.Installer/*.wixproj"/>
        <include name="install/NUnit.Framework.Installer/*.wxs"/>
        <include name="install/NUnit.Framework.Installer/*.wxi"/>
        <include name="install/NUnit.Framework.Installer/License.rtf"/>
      </fileset>
    </copy>

    <nant target="package" inheritrefs="true">
      <buildfiles refid="project.buildfiles" />
    </nant>

    <mkdir dir="${package.solutions.dir}" />

    <copy todir="${package.solutions.dir}">
      <fileset basedir="${project.solutions.dir}">
        <include name="**/NUnitFramework.sln"/>
        <include name="**/nunit.framework/nunit.snk"/>
        <include name="**/nunit.framework/nunit.framework.csproj"/>
        <include name="**/nunit.framework.tests/nunit.framework.tests.csproj"/>
        <include name="**/nunitlite/nunit.snk"/>
        <include name="**/nunitlite/nunitlite.csproj"/>
        <include name="**/nunitlite.tests/nunitlite.tests.csproj"/>
        <include name="**/test-assembly/test-assembly.csproj"/>
        <include name="**/test-runner/test-runner.csproj"/>
      </fileset>
    </copy>

  </target>

<!-- ***************************************************************** -->
<!-- ***               Copy the tools for a package                *** -->
<!-- ***************************************************************** -->

  <target name="copy-tools">

    <mkdir dir="${package.tools.dir}" />

    <copy todir="${package.tools.dir}">
      <fileset basedir="${project.tools.dir}">
        <include name="bin/GenSyntax.exe"/>
        <include name="src/CodeGeneration/CodeGeneration.sln"/>
        <include name="src/CodeGeneration/CodeGeneration.build"/>
        <include name="src/CodeGeneration/**/*.csproj"/>
        <include name="src/CodeGeneration/**/*.cs"/>
        <include name="src/CodeGeneration/GenSyntax/App.ico"/>
      </fileset>
    </copy>

  </target>

<!-- ***************************************************************** -->
<!-- ***    Targets for building custom tools used in the build    *** -->
<!-- ***                                                           *** -->
<!-- ***    NOTE: Tools are not built automatically. If you are    *** -->
<!-- ***    building from source and don't have binaries for       *** -->
<!-- ***    NUnit-specific tools, you can run this target.         *** -->
<!-- ***************************************************************** -->

  <target name="clean-tools"
      description="Remove binaries of tools used to build NUnit (DANGEROUS!)">

    <nant target="clean" buildfile="tools/src/CodeGeneration/CodeGeneration.build"/>

  </target>

  <target name="build-tools"
      description="Build tools used in building NUnit">

    <nant target="GenSyntax" buildfile="tools/src/CodeGeneration/CodeGeneration.build"/>

    <!-- Ensure we only do this once per session -->
    <property name="built.tools" value="YES"/>

  </target>

<!-- ***************************************************************** -->
<!-- ****** Patternsets and Filesets Used by Various Targets  ******** -->
<!-- ***************************************************************** -->

  <fileset id="project.buildfiles" basedir="${project.src.dir}">

    <!-- Framework -->
    <include name="framework/nunit.framework.build" />
    <!-- Framework Tests -->
    <include name="tests/nunit.framework.tests.build" />
    <!-- Test Data -->
    <include name="test-assembly/test-assembly.build" />
    <!-- Test Runner -->
    <include name="runner/test-runner.build" />

  </fileset>

  <!-- Files to be copied to source directories -->
  <fileset id="source-files" >
        <include name="**/*.sln" />
        <include name="**/*.csproj" />
        <include name="**/*.config" />
        <include name="**/*.build" />
        <include name="**/*.cs" />
        <include name="**/*.xsd" />
        <include name="**/*.xslt" />
        <include name="**/*.resx" />
        <include name="**/*.jpg" />
        <include name="**/*.gif" />
        <include name="**/*.ico" />
        <include name="**/*.txt" />
        <include name="**/resources/*" />

        <exclude name="**/CVS/**" />
        <exclude name="**/bin/**" />
        <exclude name="**/obj/**" />
        <exclude name="**/Debug/**" />
        <exclude name="**/Release/**" />
  </fileset>

</project>
